<?xml version="1.0"?>

<st-source>
<time-stamp>From VisualWorksÂ® NonCommercial, 7.4.1 of May 30, 2006 on May 12, 2022 at 2:12:19 pm</time-stamp>


<class>
<name>User</name>
<environment>Smalltalk</environment>
<super>DaskalosDataObject</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>username name surname email birtdate </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>DaskalosUserClasses</category>
<attributes>
<package>DaskalosUserClasses</package>
</attributes>
</class>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>User class</class-id> <category>instance variables behavior</category>

<body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes
"resource for Daskalos"
^((Core.Dictionary new) add: (#surname -&gt; Core.String); add: (#email -&gt; Core.String); add: (#username -&gt; Core.String); add: (#birtdate -&gt; Core.Date); add: (#name -&gt; Core.String); yourself)</body>
</methods>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>User</class-id> <category>accessing</category>

<body package="DaskalosUserClasses" selector="birtdate">birtdate
"generated by Daskalos"

     ^birtdate</body>

<body package="DaskalosUserClasses" selector="birtdate:">birtdate: anObject
"generated by Daskalos"

     birtdate := (self checkValue: anObject forVariable: #birtdate)</body>

<body package="DaskalosUserClasses" selector="email">email
"generated by Daskalos"

     ^email</body>

<body package="DaskalosUserClasses" selector="email:">email: anObject
"generated by Daskalos"

     email := (self checkValue: anObject forVariable: #email)</body>

<body package="DaskalosUserClasses" selector="name">name
"generated by Daskalos"

     ^name</body>

<body package="DaskalosUserClasses" selector="name:">name: anObject
"generated by Daskalos"

     name := (self checkValue: anObject forVariable: #name)</body>

<body package="DaskalosUserClasses" selector="surname">surname
"generated by Daskalos"

     ^surname</body>

<body package="DaskalosUserClasses" selector="surname:">surname: anObject
"generated by Daskalos"

     surname := (self checkValue: anObject forVariable: #surname)</body>

<body package="DaskalosUserClasses" selector="username">username
"generated by Daskalos"

     ^username</body>

<body package="DaskalosUserClasses" selector="username:">username: anObject
"generated by Daskalos"

     username := (self checkValue: anObject forVariable: #username)</body>
</methods>

<methods>
<class-id>User</class-id> <category>instance initialization</category>

<body package="DaskalosUserClasses" selector="initialize">initialize
"generated by Daskalos"

     super initialize.
     username := nil.
     name := nil.
     surname := nil.
     email := nil.
     birtdate := nil.
</body>
</methods>

<methods>
<class-id>User</class-id> <category>other methods</category>

<body package="DaskalosUserClasses" selector="age">age
	birtdate isNil 
		ifTrue: [^nil]
		ifFalse: [^((Date today subtractDate: birtdate) / 365.2422) truncated]</body>
</methods>


<class>
<name>Client</name>
<environment>Smalltalk</environment>
<super>User</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>DaskalosUserClasses</category>
<attributes>
<package>DaskalosUserClasses</package>
</attributes>
</class>


<class>
<name>Employee</name>
<environment>Smalltalk</environment>
<super>User</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>workedHours hourTax boardingDate </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>DaskalosUserClasses</category>
<attributes>
<package>DaskalosUserClasses</package>
</attributes>
</class>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Employee class</class-id> <category>instance variables behavior</category>

<body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes
"resource for Daskalos"
^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#birtdate -&gt; Core.Date); add: (#boardingDate -&gt; Core.Date); add: (#surname -&gt; Core.String); add: (#email -&gt; Core.String); add: (#hourTax -&gt; Core.Number); add: (#workedHours -&gt; Core.Number); add: (#username -&gt; Core.String); yourself)</body>
</methods>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Employee</class-id> <category>accessing</category>

<body package="DaskalosUserClasses" selector="boardingDate">boardingDate
"generated by Daskalos"

     ^boardingDate</body>

<body package="DaskalosUserClasses" selector="boardingDate:">boardingDate: anObject
"generated by Daskalos"

     boardingDate := (self checkValue: anObject forVariable: #boardingDate)</body>

<body package="DaskalosUserClasses" selector="hourTax">hourTax
"generated by Daskalos"

     ^hourTax</body>

<body package="DaskalosUserClasses" selector="hourTax:">hourTax: anObject
"generated by Daskalos"

     hourTax := (self checkValue: anObject forVariable: #hourTax)</body>

<body package="DaskalosUserClasses" selector="workedHours">workedHours
"generated by Daskalos"

     ^workedHours</body>

<body package="DaskalosUserClasses" selector="workedHours:">workedHours: anObject
"generated by Daskalos"

     workedHours := (self checkValue: anObject forVariable: #workedHours)</body>
</methods>

<methods>
<class-id>Employee</class-id> <category>instance initialization</category>

<body package="DaskalosUserClasses" selector="initialize">initialize
"generated by Daskalos"

     super initialize.
     workedHours := nil.
     hourTax := nil.
     boardingDate := nil.
</body>
</methods>

<methods>
<class-id>Employee</class-id> <category>other methods</category>

<body package="DaskalosUserClasses" selector="emloymentDays">emloymentDays
	boardingDate isNil 
		ifTrue: [^nil]
		ifFalse: [^Date today subtractDate: boardingDate]</body>
</methods>


<class>
<name>Order</name>
<environment>Smalltalk</environment>
<super>DaskalosDataObject</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>dateOfCreate area location realPrice author </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>DaskalosUserClasses</category>
<attributes>
<package>DaskalosUserClasses</package>
</attributes>
</class>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Order class</class-id> <category>instance variables behavior</category>

<body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes
"resource for Daskalos"
^((Core.Dictionary new) add: (#area -&gt; Core.Number); add: (#location -&gt; Core.String); add: (#realPrice -&gt; Core.Number); add: (#dateOfCreate -&gt; Core.Date); add: (#author -&gt; Core.Object); yourself)</body>
</methods>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Order</class-id> <category>accessing</category>

<body package="DaskalosUserClasses" selector="area">area
"generated by Daskalos"

     ^area</body>

<body package="DaskalosUserClasses" selector="area:">area: anObject
"generated by Daskalos"

     area := (self checkValue: anObject forVariable: #area)</body>

<body package="DaskalosUserClasses" selector="author">author
"generated by Daskalos"

     ^author</body>

<body package="DaskalosUserClasses" selector="author:">author: anObject
"generated by Daskalos"

     author := (self checkValue: anObject forVariable: #author)</body>

<body package="DaskalosUserClasses" selector="dateOfCreate">dateOfCreate
"generated by Daskalos"

     ^dateOfCreate</body>

<body package="DaskalosUserClasses" selector="dateOfCreate:">dateOfCreate: anObject
"generated by Daskalos"

     dateOfCreate := (self checkValue: anObject forVariable: #dateOfCreate)</body>

<body package="DaskalosUserClasses" selector="location">location
"generated by Daskalos"

     ^location</body>

<body package="DaskalosUserClasses" selector="location:">location: anObject
"generated by Daskalos"

     location := (self checkValue: anObject forVariable: #location)</body>

<body package="DaskalosUserClasses" selector="realPrice">realPrice
"generated by Daskalos"

     ^realPrice</body>

<body package="DaskalosUserClasses" selector="realPrice:">realPrice: anObject
"generated by Daskalos"

     realPrice := (self checkValue: anObject forVariable: #realPrice)</body>
</methods>

<methods>
<class-id>Order</class-id> <category>instance initialization</category>

<body package="DaskalosUserClasses" selector="initialize">initialize
"generated by Daskalos"

     super initialize.
     dateOfCreate := nil.
     area := nil.
     location := nil.
     realPrice := nil.
     author := nil.
</body>
</methods>

<methods>
<class-id>Order</class-id> <category>other methods</category>

<body package="DaskalosUserClasses" selector="estimatedPrice">estimatedPrice
	"comment stating purpose of message"

	^area * 4.2</body>
</methods>


<class>
<name>Result</name>
<environment>Smalltalk</environment>
<super>DaskalosDataObject</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>author createDate relativePathToFile order </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>DaskalosUserClasses</category>
<attributes>
<package>DaskalosUserClasses</package>
</attributes>
</class>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Result class</class-id> <category>instance variables behavior</category>

<body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes
"resource for Daskalos"
^((Core.Dictionary new) add: (#relativePathToFile -&gt; Core.String); add: (#order -&gt; Core.Object); add: (#createDate -&gt; Core.Date); add: (#author -&gt; Core.Object); yourself)</body>
</methods>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Result</class-id> <category>accessing</category>

<body package="DaskalosUserClasses" selector="author">author
"generated by Daskalos"

     ^author</body>

<body package="DaskalosUserClasses" selector="author:">author: anObject
"generated by Daskalos"

     author := (self checkValue: anObject forVariable: #author)</body>

<body package="DaskalosUserClasses" selector="createDate">createDate
"generated by Daskalos"

     ^createDate</body>

<body package="DaskalosUserClasses" selector="createDate:">createDate: anObject
"generated by Daskalos"

     createDate := (self checkValue: anObject forVariable: #createDate)</body>

<body package="DaskalosUserClasses" selector="order">order
"generated by Daskalos"

     ^order</body>

<body package="DaskalosUserClasses" selector="order:">order: anObject
"generated by Daskalos"

     order := (self checkValue: anObject forVariable: #order)</body>

<body package="DaskalosUserClasses" selector="relativePathToFile">relativePathToFile
"generated by Daskalos"

     ^relativePathToFile</body>

<body package="DaskalosUserClasses" selector="relativePathToFile:">relativePathToFile: anObject
"generated by Daskalos"

     relativePathToFile := (self checkValue: anObject forVariable: #relativePathToFile)</body>
</methods>

<methods>
<class-id>Result</class-id> <category>instance initialization</category>

<body package="DaskalosUserClasses" selector="initialize">initialize
"generated by Daskalos"

     super initialize.
     author := nil.
     createDate := nil.
     relativePathToFile := nil.
     order := nil.
</body>
</methods>


<class>
<name>ShapeFile</name>
<environment>Smalltalk</environment>
<super>Result</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>usedSoftware </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>DaskalosUserClasses</category>
<attributes>
<package>DaskalosUserClasses</package>
</attributes>
</class>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>ShapeFile class</class-id> <category>instance variables behavior</category>

<body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes
"resource for Daskalos"
^((Core.Dictionary new) add: (#usedSoftware -&gt; Core.String); yourself)</body>
</methods>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>ShapeFile</class-id> <category>accessing</category>

<body package="DaskalosUserClasses" selector="usedSoftware">usedSoftware
"generated by Daskalos"

     ^usedSoftware</body>

<body package="DaskalosUserClasses" selector="usedSoftware:">usedSoftware: anObject
"generated by Daskalos"

     usedSoftware := (self checkValue: anObject forVariable: #usedSoftware)</body>
</methods>

<methods>
<class-id>ShapeFile</class-id> <category>instance initialization</category>

<body package="DaskalosUserClasses" selector="initialize">initialize
"generated by Daskalos"

     super initialize.
     usedSoftware := nil.
</body>
</methods>


<class>
<name>Ortofoto</name>
<environment>Smalltalk</environment>
<super>Result</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>takingHour takingMinute sunPosition </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>DaskalosUserClasses</category>
<attributes>
<package>DaskalosUserClasses</package>
</attributes>
</class>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Ortofoto class</class-id> <category>instance variables behavior</category>

<body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes
"resource for Daskalos"
^((Core.Dictionary new) add: (#takingMinute -&gt; Core.Number); add: (#author -&gt; Core.Object); add: (#sunPosition -&gt; Core.String); add: (#takingHour -&gt; Core.Number); add: (#relativePathToFile -&gt; Core.String); add: (#createDate -&gt; Core.Date); yourself)</body>
</methods>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Ortofoto</class-id> <category>accessing</category>

<body package="DaskalosUserClasses" selector="sunPosition">sunPosition
"generated by Daskalos"

     ^sunPosition</body>

<body package="DaskalosUserClasses" selector="sunPosition:">sunPosition: anObject
"generated by Daskalos"

     sunPosition := (self checkValue: anObject forVariable: #sunPosition)</body>

<body package="DaskalosUserClasses" selector="takingHour">takingHour
"generated by Daskalos"

     ^takingHour</body>

<body package="DaskalosUserClasses" selector="takingHour:">takingHour: anObject
"generated by Daskalos"

     takingHour := (self checkValue: anObject forVariable: #takingHour)</body>

<body package="DaskalosUserClasses" selector="takingMinute">takingMinute
"generated by Daskalos"

     ^takingMinute</body>

<body package="DaskalosUserClasses" selector="takingMinute:">takingMinute: anObject
"generated by Daskalos"

     takingMinute := (self checkValue: anObject forVariable: #takingMinute)</body>
</methods>

<methods>
<class-id>Ortofoto</class-id> <category>instance initialization</category>

<body package="DaskalosUserClasses" selector="initialize">initialize
"generated by Daskalos"

     super initialize.
     takingHour := nil.
     takingMinute := nil.
     sunPosition := nil.
</body>
</methods>


</st-source>
